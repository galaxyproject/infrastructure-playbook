---

- name: Instance spawn block
  block:

    - name: Create data volume
      os_volume:
        cloud: "{{ os_cloud_id }}"
        display_name: "{{ item.name }}"
        size: "{{ item.size }}"
      delegate_to: localhost
      loop: "{{ os_volumes | default([]) }}"

    - name: Spawn new instance
      os_server:
        cloud: "{{ os_cloud_id }}"
        name: "{{ os_name | default(inventory_hostname) }}"
        image: "{{ os_image }}"
        flavor: "{{ os_flavor }}"
        key_name: "{{ os_key_name }}"
        nics: "{{ os_nics }}"
        security_groups: "{{ os_security_groups }}"
        auto_ip: "{{ os_auto_ip | default(omit) }}"
        floating_ips: "{{ os_floating_ips | default(omit) }}"
        meta: "group={{ group_names[0] }}"
        #volumes: "{{ os_volumes | default(omit) }}"
        #volumes: "{{ os_volumes }}"
        userdata: |
          #cloud-config
          package_upgrade: false
      delegate_to: localhost
      register: __spawn_result

    # As far as I can tell, the first time this runs (when the attachment is done) is the only way to discover the volume device
    - name: Attach volumes to instances
      os_server_volume:
        cloud: "{{ os_cloud_id }}"
        server: "{{ os_name | default(inventory_hostname) }}"
        volume: "{{ item.name }}"
      delegate_to: localhost
      loop: "{{ os_volumes | default([]) }}"
      register: __attach_result

    - name: Set volume device(s) fact
      set_fact:
        __os_volume_devices: "{{ __attach_result.results | selectattr('attachments', 'defined') | map(attribute='attachments') | flatten | map(attribute='device') | list }}"

    # Turns out you can't have overlapping host_vars files and dirs, so for this to work, the host_vars that are
    # being used to create this instance will need to already be in a dir (so this step is redundant)
    #- name: Create host_vars dir
    #  file:
    #    path: "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}"
    #    state: directory
    #  when: __os_volume_devices | length > 0
    #  delegate_to: localhost

    # I tried:
    #   fstype: {{ '"{{' }} mounts[{{ loop.index0 }}].fstype {{ '}}' }}
    # but this results in: recursive loop detected in template string: {{ filesystems[0].dev }}
    # even though the actual attributes themselves aren't circular
    - name: Write volume device(s) to host_vars
      copy:
        content: |
          ---
          ## This file is automatically generated by the openstack role
          filesystems:
          {% for volume_def, device in os_volumes | zip(__os_volume_devices) %}
            - dev: {{ device }}
              fstype: {{ os_volumes[loop.index0].fstype }}
          {% endfor %}
        dest: "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}/os_volume_devices.yml"
      when: __os_volume_devices | length > 0
      delegate_to: localhost

    - name: Update inventory with spawned instance IP
      set_fact:
        ansible_host: "{{ __spawn_result.server.public_v4 or __spawn_result.server.private_v4 }}"
      #delegate_to: localhost

    - name: Log IP addresses
      debug:
        var: ansible_host

    - name: Wait for instance to become accessible
      wait_for_connection:
        timeout: 120

    - name: Set authorized keys
      authorized_key:
        user: "{{ ansible_user }}"
        key: "{% for authorized in os_admin_users %}{{ sshkeys[authorized] ~ '\n' }}{% endfor %}"
        exclusive: "{{ os_admin_users_exclusive | default('yes') }}"
      when: os_admin_users is defined

  always:

    - import_tasks: clean.yml

  rescue:

    - fail:
        msg: Exiting due to previous failure
