---

- name: Check Sentry onpremise repo presence
  stat:
    path: "{{ sentry_prefix }}"
  register: __sentry_prefix_stat

- name: Clone Sentry onpremise repo
  git:
    dest: "{{ sentry_prefix }}"
    repo: "{{ sentry_repo }}"
    version: "{{ sentry_repo_version }}"
  register: __sentry_repo_cloned
  #notify:
  #  - Upgrade Sentry

- name: Set sentry_run_install_script
  set_fact:
    __sentry_run_install_script: "{{ sentry_run_install_script if sentry_run_install_script is defined else (__sentry_repo_cloned is changed) }}"

- name: Run installation script
  command: /bin/bash ./install.sh --skip-user-creation --no-report-self-hosted-issues
  args:
    chdir: "{{ sentry_prefix }}"
  when: __sentry_run_install_script

- name: Copy configs
  template:
    src: "{{ item | basename }}.j2"
    dest: "{{ sentry_prefix }}/{{ item }}"
  loop:
    - sentry/sentry.conf.py
    - sentry/config.yml
  #notify:
  #  - Restart Sentry

# TODO: requires python docker-compose in system python, just start by hand
# This always reports changed, not sure why
#- name: Run Sentry
#  docker_compose:
#    project_src: "{{ sentry_prefix }}"

# TODO: this breaks the running container
#- name: Create Sentry superuser
#  docker_container:
#    container_default_behavior: no_defaults
#    name: sentry_onpremise_web_1
#    command: sentry createuser --superuser --email {{ sentry_superuser_email }} --password {{ sentry_superuser_password }} --no-input

- name: Create Sentry superuser
  command: docker exec sentry_onpremise_web_1 sentry createuser --superuser --email {{ sentry_superuser_email }} --password {{ sentry_superuser_password }} --no-input
  when: not __sentry_prefix_stat.stat.exists

# Below was an initial attempt at deconstructing the install script to make this role more properly Ansible, but there's
# just too much going on in there, especially conditionals checking things in docker volumes that is difficult to
# replicate in Ansible. And the script is going to change over time, so this is not really sustainable for us. Progress
# saved in case we ever want to revisit it though.

#- name: Create Sentry Docker volumes
#  docker_volume:
#    volume_name: "{{ item }}"
#  loop: "{{ sentry_docker_volumes }}"
#
#- name: Create config files from samples
#  copy:
#    src: "{{ sentry_prefix }}/{{ item }}"
#    dest: "{{ sentry_prefix }}/{{ item | replace('.example', '') }}"
#    remote_src: true
#    force: false
#  loop: "{{ sentry_example_configs }}"
#
#- name: Read Compose definition
#  slurp:
#    src: "{{ sentry_prefix }}/docker-compose.yml"
#  register: __sentry_compose_slurp
#
#- name: Set Compose definition fact
#  set_fact:
#    __sentry_compose: "{{ __sentry_compose_slurp['content'] | b64decode | from_yaml }}"
#
#- name: Separate services requiring build from pull
#  set_fact:
#    __sentry_build_services: |
#      {% set rval = {} -%}
#      {% for service in __sentry_compose.services.keys() -%}
#          {% if __sentry_compose.services[service].image.endswith('-onpremise-local') -%}
#              {% set _ = rval.update({service: __sentry_compose.services[service].image}) -%}
#          {% endif -%}
#      {% endfor -%}
#      {{ rval }}
#    __sentry_pull_services: |
#      {% set rval = {} -%}
#      {% for service in __sentry_compose.services.keys() -%}
#          {% if not __sentry_compose.services[service].image.endswith('-onpremise-local') -%}
#              {% set _ = rval.update({service: __sentry_compose.services[service].image}) -%}
#          {% endif -%}
#      {% endfor -%}
#      {{ rval }}
#
#- name: Pull images
#  docker_compose:
#    project_src: "{{ sentry_prefix }}"
#    services: "{{ __sentry_pull_services.keys() }}"
#    build: false
#    pull: true
#    # FIXME: you won't want this after the first time...
#    stopped: true
#
#- name: Build images
#  docker_compose:
#    project_src: "{{ sentry_prefix }}"
#    services: "{{ __sentry_build_services.keys() }}"
#    build: true
#    pull: false
#    # FIXME: you won't want this after the first time...
#    stopped: true
#
#- name: Run Zookeeper setup
#  docker_container:
#    auto_remove: true
#    container_default_behavior: no_defaults
