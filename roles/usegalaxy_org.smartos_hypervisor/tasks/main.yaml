---

- name: Ensure required variables are set
  ansible.builtin.assert:
    that:
      - "{{ item }} is defined"
    fail_msg: "Required var is undefined: {{ item }}"
    success_msg: "Required var is defined: {{ item }}"
  loop: "{{ smartos_hypervisor_role_required_vars }}"

- name: Loader configuration block
  when: smartos_hypervisor_loader_options is defined and smartos_hypervisor_loader_options
  block:

    - name: Create /zones/boot/custom
      ansible.builtin.file:
        path: "/zones/boot/custom"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Set loader options
      ansible.builtin.copy:
        content: |
          {% for option in smartos_hypervisor_loader_options %}
          {{ option }}
          {% endfor %}
        dest: "/zones/boot/custom/loader.conf.local"
        owner: root
        group: root
        mode: "0644"

    # piadm links this for any new platform images you install
    - name: Ensure loader.conf.local is linked
      ansible.builtin.file:
        state: link
        src: "../custom/loader.conf.local"
        dest: "/zones/boot/boot/loader.conf.local"
        owner: root
        group: root

- name: Set SmartOS GZ config options
  ansible.builtin.lineinfile:
    dest: "/usbkey/config"
    regexp: "^{{ item.split('=')[0] }}=.*"
    line: "{{ item }}"
  loop:
    - "hostname={{ inventory_hostname_short }}"
    - "root_authorized_keys_file={{ smartos_hypervisor_root_authorized_keys_file }}"

- name: Create config.inc directory
  ansible.builtin.file:
    path: /usbkey/config.inc
    state: directory
    mode: "0755"
    owner: root

- name: Install root_authorized_keys file
  ansible.builtin.copy:
    dest: "/usbkey/config.inc/{{ smartos_hypervisor_root_authorized_keys_file }}"
    mode: "0644"
    owner: root
    content: |
      ### This file is managed by Ansible.  ALL CHANGES WILL BE OVERWRITTEN.
      {% for user in smartos_hypervisor_root_authorized_keys %}
      {{ ssh_public_keys[user] }}
      {% endfor %}

- name: Enable compression on zones
  community.general.zfs:
    name: zones
    state: present
    extra_zfs_properties:
      compression: "{{ smartos_hypervisor_zones_compression }}"
  when: smartos_hypervisor_zones_compression

- name: Disable compression on zones block
  when: not smartos_hypervisor_zones_compression
  block:

    - name: Collect compression property
      community.general.zfs_facts:
        name: zones
        type: filesystem
        properties: compression

    # there's no `zfs inherit` functionaly in a module
    - name: Disable compression on zones
      ansible.builtin.command: /usr/sbin/zfs inherit compression zones
      when: ansible_zfs_datasets[0].compression != "off"

- name: Perform imgadm commands
  community.general.imgadm:
    force: "{{ item.force | default(omit) }}"
    pool: "{{ item.pool | default(omit) }}"
    source: "{{ item.source | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    type: "{{ item.type | default(omit) }}"
    uuid: "{{ item.uuid | default(omit) }}"
  loop: "{{ smartos_images | default([]) }}"

- name: Perform vmadm commands
  community.general.vmadm:
    archive_on_delete: "{{ item.archive_on_delete | default(omit) }}"
    autoboot: "{{ item.autoboot | default(omit) }}"
    boot: "{{ item.boot | default(omit) }}"
    brand: "{{ item.brand | default(omit) }}"
    cpu_cap: "{{ item.cpu_cap | default(omit) }}"
    cpu_shares: "{{ item.cpu_shares | default(omit) }}"
    cpu_type: "{{ item.cpu_type | default(omit) }}"
    customer_metadata: "{{ item.customer_metadata | default(omit) }}"
    delegate_dataset: "{{ item.delegate_dataset | default(omit) }}"
    disk_driver: "{{ item.disk_driver | default(omit) }}"
    disks: "{{ item.disks | default(omit) }}"
    dns_domain: "{{ item.dns_domain | default(omit) }}"
    docker: "{{ item.docker | default(omit) }}"
    filesystems: "{{ item.filesystems | default(omit) }}"
    firewall_enabled: "{{ item.firewall_enabled | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
    fs_allowed: "{{ item.fs_allowed | default(omit) }}"
    hostname: "{{ item.hostname | default(omit) }}"
    image_uuid: "{{ item.image_uuid | default(omit) }}"
    indestructible_delegated: "{{ item.indestructible_delegated | default(omit) }}"
    indestructible_zoneroot: "{{ item.indestructible_zoneroot | default(omit) }}"
    internal_metadata: "{{ item.internal_metadata | default(omit) }}"
    internal_metadata_namespace: "{{ item.internal_metadata_namespace | default(omit) }}"
    kernel_version: "{{ item.kernel_version | default(omit) }}"
    limit_priv: "{{ item.limit_priv | default(omit) }}"
    maintain_resolvers: "{{ item.maintain_resolvers | default(omit) }}"
    max_locked_memory: "{{ item.max_locked_memory | default(omit) }}"
    max_lwps: "{{ item.max_lwps | default(omit) }}"
    max_physical_memory: "{{ item.max_physical_memory | default(omit) }}"
    max_swap: "{{ item.max_swap | default(omit) }}"
    mdata_exec_timeout: "{{ item.mdata_exec_timeout | default(omit) }}"
    # Doesn't work as name??
    #name: "{{ item.name | default(omit) }}"
    alias: "{{ item.name | default(item.alias | default(omit)) }}"
    nic_driver: "{{ item.nic_driver | default(omit) }}"
    nics: "{{ item.nics | default(omit) }}"
    nowait: "{{ item.nowait | default(omit) }}"
    qemu_extra_opts: "{{ item.qemu_extra_opts | default(omit) }}"
    qemu_opts: "{{ item.qemu_opts | default(omit) }}"
    quota: "{{ item.quota | default(omit) }}"
    ram: "{{ item.ram | default(omit) }}"
    resolvers: "{{ item.resolvers | default(omit) }}"
    routes: "{{ item.routes | default(omit) }}"
    spice_opts: "{{ item.spice_opts | default(omit) }}"
    spice_password: "{{ item.spice_password | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    tmpfs: "{{ item.tmpfs | default(omit) }}"
    uuid: "{{ item.uuid | default(omit) }}"
    vcpus: "{{ item.vcpus | default(omit) }}"
    vga: "{{ item.vga | default(omit) }}"
    virtio_txburst: "{{ item.virtio_txburst | default(omit) }}"
    virtio_txtimer: "{{ item.virtio_txtimer | default(omit) }}"
    vnc_password: "{{ item.vnc_password | default(omit) }}"
    vnc_port: "{{ item.vnc_port | default(omit) }}"
    zfs_data_compression: "{{ item.zfs_data_compression | default(omit) }}"
    zfs_data_recsize: "{{ item.zfs_data_recsize | default(omit) }}"
    zfs_filesystem_limit: "{{ item.zfs_filesystem_limit | default(omit) }}"
    zfs_io_priority: "{{ item.zfs_io_priority | default(omit) }}"
    zfs_root_compression: "{{ item.zfs_root_compression | default(omit) }}"
    zfs_root_recsize: "{{ item.zfs_root_recsize | default(omit) }}"
    zfs_snapshot_limit: "{{ item.zfs_snapshot_limit | default(omit) }}"
    zpool: "{{ item.zpool | default(omit) }}"
  loop: "{{ smartos_vms | default([]) }}"
