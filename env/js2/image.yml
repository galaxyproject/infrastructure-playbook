---
# To use, your Ansible controller must have openstacksdk and python-openstackclient installed

- name: Spawn instances
  hosts: imagehosts
  gather_facts: no
  environment:
    OS_CLOUD: "{{ os_cloud_id }}"
    OS_IDENTITY_API_VERSION: '3'
  tasks:

    - block:

        - name: Initialize failure fact
          set_fact:
            task_failed_successfully: false

        - name: Import openstack role
          import_role:
            name: openstack

      rescue:

        - name: Write Openstack secrets
          import_role:
            name: openstack_secrets

        - name: Destroy image instance
          os_server:
            name: "{{ inventory_hostname }}"
            state: absent
          environment:
            OS_CLOUD: "{{ os_cloud_id }}"
            OS_IDENTITY_API_VERSION: '3'
          delegate_to: localhost
          run_once: true

        - name: Set failure fact to skip additional plays
          set_fact:
            task_failed_successfully: true

- name: Configure instance(s)
  hosts: imagehosts
  environment:
    HISTFILE: null
  tasks:

    - block:

        # We got the router blocked somehow, but it's ok since we don't need updates from ELRepo currently (but the
        # repo config ships in Featured-RockyLinux8 currently)
        - name: Disable ELRepo
          command: dnf config-manager --set-disabled ELRepo

        - name: Create groups
          group:
            name: "{{ item.name }}"
            gid: "{{ item.gid }}"
          loop:
            - name: G-803372
              gid: 803372
            - name: idc
              gid: 808

        - name: Create users
          user:
            name: "{{ item.name }}"
            uid: "{{ item.uid }}"
            home: "/home/{{ item.name }}"
            shell: /bin/bash
            group: "{{ item.group }}"
            groups: docker
            create_home: true
          loop:
            - name: g2main
              uid: 819800
              group: G-803372
            - name: g2test
              uid: 819456
              group: G-803372
            - name: idc
              uid: 808
              group: idc

        - name: Install Packages
          yum:
            name:
              #- autofs
              - lzo
              - git
              - libcgroup-tools
              - apptainer
              - python39
          # sometimes mirrors are broken
          register: packages_installed
          retries: 10
          delay: 5
          until: packages_installed is success

        - name: Get /var/lib size
          command: df -kl --output=size /var/lib
          register: df_out

        - name: Set CVMFS cache size
          set_fact:
            cvmfs_quota_limit: "{{ (((df_out.stdout_lines[-1] | trim | int) * 0.7) / 1024) | int }}"

        - name: Log CVMFS cache size
          debug:
            var: cvmfs_quota_limit

        - name: Disable SELinux
          selinux:
            state: disabled

        - name: Ensure firewalld is not installed
          yum:
            name: firewalld
            state: absent

        - name: Configure Ceph
          import_role:
            name: ceph_mount

        - name: Import CVMFS role
          import_role:
            name: galaxyproject.cvmfs

        - name: Import Slurm role
          import_role:
            name: galaxyproject.slurm

        - name: Fix /var/spool/slurm perms
          file:
            path: /var/spool/slurm
            owner: slurm
            group: slurm
            mode: 0755

        # on restarts we want to wait until the playbook copies slurm.conf and starts slurmd itself
        - name: Disable slurmd autostart
          service:
            name: slurmd
            enabled: false

        # docker is already installed in the feature image
        #- name: Install Docker
        #  import_role:
        #    name: docker

        #- name: Add Galaxy users to docker group
        #  user:
        #    name: "{{ item.name }}"
        #    groups: docker
        #    append: true
        #  loop:
        #    - name: g2main
        #    - name: g2test

        - name: Install Tailscale
          include_role:
            name: artis3n.tailscale
          when: inventory_hostname == "usegalaxy-gxit-node"

        - name: Install galaxy-job-execution
          pip:
            name: "{{ galaxy_job_execution_pip_name | default('galaxy-job-execution') }}"
            extra_args: --extra-index-url=https://wheels.galaxyproject.org/
            virtualenv: /opt/galaxy-job-execution
            virtualenv_command: /usr/bin/python3.9 -m venv
          when: inventory_hostname == "usegalaxy-gxit-node"

        - name: Stop services for cleaning
          service:
            name: "{{ item }}"
            state: stopped
          loop:
            - tuned
            - rsyslog
            #- auditd

        - name: Stop auditd
          command: service auditd stop

        - name: Clean yum
          command: yum clean all

        - name: Remove logs
          file:
            path: "/var/log/{{ item }}"
            state: absent
          loop:
            - audit/audit.log
            - tuned/tuned.log
            - dmesg
            - boot.log
            - maillog
            - btmp
            - cloud-init-output.log
            - cloud-init.log
            - wtmp
            - lastlog
            - secure
            - cron
            - messages
            - yum.log

        - name: Remove home directory files
          file:
            path: "~{{ ansible_user }}/{{ item }}"
            state: absent
          loop:
            - .ssh
            - .bash_history

        - name: Remove other files
          file:
            path: "{{ item }}"
            state: absent
          with_items:
            - /root/.bash_history
            - /etc/hostname

        #- name: Touch /.autorelabel
        #  file:
        #    path: /.autorelabel
        #    state: touch

      rescue:

        - name: Write Openstack secrets
          import_role:
            name: openstack_secrets

        - name: Destroy image instance
          os_server:
            name: "{{ inventory_hostname }}"
            state: absent
          environment:
            OS_CLOUD: "{{ os_cloud_id }}"
            OS_IDENTITY_API_VERSION: '3'
          delegate_to: localhost
          run_once: true

        - name: Set failure fact to skip additional plays
          set_fact:
            task_failed_successfully: true

      when: not task_failed_successfully

- name: Finalize image
  hosts: imagehosts
  gather_facts: no
  environment:
    OS_CLOUD: "{{ os_cloud_id }}"
    OS_IDENTITY_API_VERSION: '3'
  tasks:

    - block:

        - name: Write Openstack secrets
          import_role:
            name: openstack_secrets

        - name: Stop instance
          os_server_action:
            cloud: "{{ cloud_id }}"
            server: "{{ inventory_hostname }}"
            action: "stop"

        - name: Collect old node image info
          os_image_info:
            image: "{{ usegalaxy_node_image_name }}"
          register: __usegalaxy_node_image

        - name: Rename existing node image
          os_image:
            name: "{{ item.id }}"
            properties:
              name: "{{ usegalaxy_node_image_name }}-{{ item.created_at }}"
          loop: "{{ __usegalaxy_node_image.images }}"

        # Can't believe there's no module for this
        - name: Create an image from the instance
          command: "openstack server image create --wait --name {{ usegalaxy_node_image_name }} {{ inventory_hostname }}"

      always:

        - name: Destroy image instance
          os_server:
            name: "{{ inventory_hostname }}"
            state: absent

      when: not task_failed_successfully
      delegate_to: localhost
      run_once: true
