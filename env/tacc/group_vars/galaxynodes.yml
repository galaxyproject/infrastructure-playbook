---

# nodes have varying size disks these days, so use 60% of /
cvmfs_quota_limit: "{{ ((ansible_mounts | selectattr('mount', 'eq', '/') | first).size_total * 0.6 / 1024**2) | int }}"

galaxy_cvmfs_repos_enabled: true

# override so that the TACC stratum 1 is always first
cvmfs_server_urls:
  - domain: galaxyproject.org
    use_geoapi: no
    urls:
      - "http://cvmfs1-tacc0.galaxyproject.org/cvmfs/@fqrn@"
      - "http://cvmfs1-iu0.galaxyproject.org/cvmfs/@fqrn@"
      - "http://cvmfs1-psu0.galaxyproject.org/cvmfs/@fqrn@"

cvmfs_http_proxies:
  - "DIRECT"

galaxynodes_group_authorized_key_users:
  - name: g2test
    authorized: "{{ galaxy_team_users }}"
  - name: g2main
    authorized: "{{ galaxy_team_users }}"

galaxynodes_group_packages:
  - tmpwatch
  - lzo
  - libcgroup-tools
  - singularity-runtime
  # packages for older tools
  - perl-Data-Dumper
  # Conda R does not package up all of its X dependencies
  # https://github.com/ContinuumIO/anaconda-issues/issues/4656
  - xorg-x11-apps
  - mesa-libGL

galaxynodes_group_files:
  - src: system/cleancgroups.py
    dest: ~root/cleancgroups.py
  - src: files/admin/tmpwatch-auto
    dest: /usr/local/bin/tmpwatch-auto
    mode: "0755"
    owner: root
    group: root

galaxynodes_group_crontabs:
  - id: clean_cgroups
    name: Clean old cgroups
    user: root
    minute: "*/5"
    job: "python /root/cleancgroups.py >> /var/log/cleancgroups.log 2>&1"
  # This is likely the actual fix for the semaphore error below
  - id: clean_dev_shm
    name: "Clean /dev/shm"
    user: root
    minute: 0
    job: "/usr/local/bin/tmpwatch-auto /dev/shm"

# attempt to fix the following in medaka_variant:
#   File "/cvmfs/main.galaxyproject.org/deps/_conda/envs/__medaka@1.3.2/lib/python3.8/multiprocessing/synchronize.py", line 57, in __init__
#     sl = self._semlock = _multiprocessing.SemLock(
#   OSError: [Errno 28] No space left on device
# these values are from usegalaxy.eu nodes, our default appears to be kernel.sem = 500  64000   64  256
galaxynodes_group_kernel_params:
  - name: kernel.sem
    value: 32000 1024000000 500 32000
