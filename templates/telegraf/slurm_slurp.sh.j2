#!/bin/bash
set -euo pipefail
#set -xv


PARTITIONS=({{ slurm_slurp_partitions |join(' ') }})

declare -A JOBS
JOB_STATES=(completing configuring pending running)

declare -A NODES
NODE_STATES=(allocated completing down drained draining idle mixed)

CLUSTER="{{ slurm_slurp_cluster_name }}"
declare -A TAGS
TAGS[cluster]="$CLUSTER"


function _array_copy() {
    local src="$1"
    local dest="$2"
    local _t=$(declare -p $1)
    eval "declare -g -A ${dest}="${_t#*=}
}


function _array_to_csv() {
    # set $2 to `true` to lowercase key names
    declare -n arr="$1"
    local lowercase="${2:-false}"
    local s k
    s=
    for k in "${!arr[@]}"; do
        _k="$k"
        if $lowercase; then
            k="${_k,,}"
        fi
        #s+="$k=\"${arr[$_k]}\","
        s+="$k=${arr[$_k]},"
    done
    echo -n ${s:0:-1}
}


function _normalize_state() {
    local state="$1"
    state="${state,,}"      # lowercase
    state="${state%*~}"     # drop trailing ~
    state="${state%*\*}"    # drop trailing *
    state="${state%*#}"     # drop trailing #
    state="${state%*%}"     # drop trailing %
    echo "$state"
}


function initialize_jobs_arrays() {
    for partition in ${PARTITIONS[@]}; do
        local name="JOBS_${partition//-/_}"
        declare -g -A "$name"
        declare -n _jobs="$name"
        for state in ${JOB_STATES[@]}; do
            _jobs[$state]=0
        done
    done
}


function initialize_nodes_arrays() {
    for state in ${NODE_STATES[@]}; do
        NODES[$state]=0
    done
    for partition in ${PARTITIONS[@]}; do
        local name="NODES_${partition//-/_}"
        declare -g -A "$name"
        declare -n _nodes="$name"
        for state in ${NODE_STATES[@]}; do
            _nodes[$state]=0
        done
    done
}


function collect_jobs() {
    local partition state
    while read partition state; do
        state="$(_normalize_state $state)"
        local name="JOBS_${partition//-/_}"
        declare -n _jobs="$name"
        ((_jobs[$state]++)) || true
    done < <(squeue -h -O partition,state)
}


function collect_nodes() {
    local nodename partition state
    while read nodename state; do
        state="$(_normalize_state $state)"
        NODES[$state]=$((NODES[$state]+1))
    done < <(sinfo -Neh -O nodelist:32,statelong | sort | uniq)
    while read nodename partition state; do
        state="$(_normalize_state $state)"
        partition="${partition%*\*}"    # drop trailing *
        local name="NODES_${partition//-/_}"
        declare -n _nodes="$name"
        ((_nodes[$state]++)) || true
    done < <(sinfo -Neh -O nodelist:32,partition,statelong)
}


function print_telegraf() {
    local measurement="$1"
    local tags="$(_array_to_csv "$2")"
    local values="$(_array_to_csv "$3")"
    echo "${measurement},${tags} ${values}"
}


function print_jobs() {
    local partition
    _array_copy TAGS local_tags
    for partition in "${PARTITIONS[@]}"; do
        local_tags[partition]="$partition"
        print_telegraf slurm_jobs local_tags "JOBS_${partition//-/_}"
    done
}


function print_nodes() {
    print_telegraf slurm_nodes TAGS NODES
    local partition
    _array_copy TAGS local_tags
    for partition in "${PARTITIONS[@]}"; do
        local_tags[partition]="$partition"
        print_telegraf slurm_nodes_by_partition local_tags "NODES_${partition//-/_}"
    done
}


function main() {
    initialize_jobs_arrays
    initialize_nodes_arrays
    collect_jobs
    collect_nodes
    print_jobs
    print_nodes
}


main
