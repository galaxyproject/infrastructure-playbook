#!/bin/bash
##
## This file is maintained by Ansible - CHANGES WILL BE OVERWRITTEN
##
set -euo pipefail

PERCENT=
HOURS=
WARN_HOURS=$((3 * 24))
LIMIT_HOURS=$((7 * 24))
DRY_RUN=false
MUTEX_ID=$(echo -n "${1:-}" | md5sum | awk '{print $1}')
MUTEX="$HOME/pulsar-clean-jobs-${MUTEX_ID}.lock"
MUTEX_ACQUIRED=false

function usage() {
    echo "usage: $0 [-hn] DIR"
    if [ "${1:-}" = 'help' ]; then
        cat <<EOF
    -h      print help
    -n      dry run
    -r      override hours
    DIR     staging dir to clean
EOF
    fi
}

while getopts ":hnr:" opt; do
    case "$opt" in
        h)
            usage help
            exit 0
            ;;
        n)
            DRY_RUN=true
            ;;
        r)
            HOURS="$OPTARG"
            ;;
    esac
done
shift $((OPTIND-1))

DIR="${1:-}"
[ -n "$DIR" ] || { usage; exit 2; }


function trap_handler() {
    if $MUTEX_ACQUIRED; then
        rmdir "$MUTEX"
        log "Released mutex: $MUTEX"
    fi
    return 0
}
trap "trap_handler" EXIT


function isintorempty() {
    # if the value passed in $1 is:
    #   an integer: return 0
    #   empty: return 1
    #   not an integer: return 2
    [ -n "${1}" ] || return 1
    [ "${1}" -eq "${1}" ] 2>/dev/null || { rc=$?; [ $rc -ne 2 ] || { echo "ERROR: invalid non-integer value: ${1}"; }; return $rc; }
    return 0
}


function isint() {
    if isintorempty "$1"; then
        return 0
    else
        [ $? -ne 1 ] || echo "ERROR: value cannot be empty string"
        return 1
    fi
}


function log() {
    [ -t 0 ] && echo -e '\033[1;32mINFO: ' "$@" '\033[0m' || echo 'INFO:' "$@"
}


function log_warning() {
    [ -t 0 ] && echo -e '\033[1;33mWARNING:' "$@" '\033[0m' || echo 'WARNING:' "$@"
}


function log_error() {
    [ -t 0 ] && echo -e '\033[1;31mERROR:' "$@" '\033[0m' || echo 'ERROR:' "$@" >&2
}


function error() {
    log_error "$@"
    exit 1
}


function percent_full() {
    {{ pulsar_clean_jobs_percent_full_function | default("echo 0") | indent(4) }}
}


function hours() {
    isint "$PERCENT" || exit 1
    # max of 5 days, scaled by percent full with a max allowed of 95%, after which the time is 0
    if [[ $PERCENT -ge 95 ]]; then
        echo 0
    else
        printf "%.0f\n" "$(echo "(5*24)*(95-${PERCENT})/95" | bc -l)"
    fi
}


function is_active() {
    local id="$1"
    if [ -f "${DIR}/${id}/final_status" -a -f "${DIR}/${id}/postprocessed" ]; then
        return 1
    fi
    return 0
}


function clean_dir() {
    local id="$1"
    local dir="${DIR}/${id}"
    log "removing: $dir"
    $DRY_RUN || rm -rf "$dir"
}


function clean() {
    PERCENT=$(percent_full)
    local hours min_mtime mtime id
    local now=$(date '+%s')
    if [ -n "$HOURS" ]; then
        log "Hours overridden by -r option: $HOURS"
        hours="$HOURS"
    else
        hours=$(hours)
    fi
    min_mtime=$(date --date="$hours hours ago" '+%s')
    log "at $(date), $DIR is ${PERCENT}% full; scratch dirs older than $(date --date="$hours hours ago") ($hours hours) will be removed"
    while read mtime id; do
        isint "$id" || error "dir is not an integer, is $DIR a staging dir?: $id"
        if is_active "$id"; then
            if [[ $(($now - $mtime)) -gt $(($LIMIT_HOURS * 60 * 60)) ]]; then
                log_warning "supposedly active job dir older than limit $LIMIT_HOURS hours, removing: $id"
                clean_dir "$id"
            elif [[ $(($now - $mtime)) -gt $(($WARN_HOURS * 60 * 60)) ]]; then
                log_warning "supposedly active job dir older than warn $WARN_HOURS hours: $id"
            else
                log "ignoring active: $id"
            fi
        else
            clean_dir "$id"
        fi
    done < <(ls -lrt --time-style=+%s "$DIR" | tail -n +2 | awk "\$6 < $min_mtime {print \$6, \$7}")
}


function main() {
    [ -d "$DIR" ] || error "Invalid directory: $DIR"
    if mkdir "$MUTEX"; then
        log "Acquired mutex: $MUTEX"
        MUTEX_ACQUIRED=true
        clean
    fi
}


main
