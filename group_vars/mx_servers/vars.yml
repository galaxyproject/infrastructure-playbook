---

# for galaxyproject.mailman3's distribute_maps feature
mx_servers_group_authorized_key_users: "{{ vault_mx_servers_group_authorized_key_users }}"

mx_servers_group_users:
  # ships with the OS but with the nologin shell
  - name: list
    shell: /bin/bash

# Debian EC2 images come without cron, I wasn't aware that was something a Linux could do
mx_servers_group_packages:
  - cron
  - tmpreaper

#
# galaxyproject.opendkim
#

opendkim_backup_configs: true
opendkim_keys:
  - selector: mail
    domain: galaxyproject.org
    secret: "{{ vault_opendkim_key_mail_secret }}"
    public: "v=DKIM1; h=sha256; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvzZfThCqxA0wdJY1ku+r+onhkpGiMLOPW8Ou/MpsxhhobXZRNePhyONfYbuc4l/bUdy9SNpSa/jVgwRAwg7UGWjyU6k4kwbRTGD1SwgSAL+xN8e9obbAgqDuj8jxSctmEMZK/dQhQcTUDvfjJ8DX9W6XgmZljqys6eb+YE9mtqrTJ933yuKZkYlXt8b/aPp/MQjhVVqGZ6Hkn8CYb0t7mtmFvkLFwyG40PLYXTwVONDvG+fAlV9XzjJKCmz3cK/qUtmtyo0Gwt7ej/xTxCITRnE+zddmtlBZNAP6VfKn/t9cF82UaFbB+mzZnt0JIzIDlMuWQO9dxJaAJbbYeezdSwIDAQAB"

# FIXME: if we only run DKIM on the amavis return do we need anything else here?
opendkim_trusted_hosts:
  - 127.0.0.1
  - ::1
  - localhost

opendkim_signing_table:
  - galaxyproject.org mail._domainkey.galaxyproject.org

opendkim_config:
  Syslog: yes
  SyslogSuccess: yes
  LogWhy: yes
  Socket: "local:/var/run/opendkim/opendkim.sock"
  KeyTable: "file:{{ opendkim_config_dir }}/KeyTable"
  ExternalIgnoreList: "refile:{{ opendkim_config_dir }}/TrustedHosts"
  InternalHosts: "refile:{{ opendkim_config_dir }}/TrustedHosts"
  SigningTable: "file:{{ opendkim_config_dir }}/SigningTable"

#
# galaxyproject.postfix
#

postfix_role: mta
postfix_mailname: galaxyproject.org
postfix_backup_configs: true
postfix_postsrsd: true

# vaulted for privacy
postfix_aliases: "{{ vault_postfix_aliases }}"
postfix_virtual_aliases: "{{ vault_postfix_virtual_aliases }}"

postfix_virtual_domains:
  - brc-analytics.org

postfix_config:
  compatibility_level: 3.6
  alias_database: hash:/etc/postfix/aliases
  alias_maps: hash:/etc/postfix/aliases
  local_recipient_maps: $alias_maps
  mnetworks_style: null
  mynetworks: "127.0.0.0/8 {{ (ansible_default_ipv4.network ~ '/' ~ ansible_default_ipv4.netmask) | ansible.utils.ipaddr('network/prefix') }} [::1]/128 [fe80::]/64"
  proxy_interfaces: "{{ ansible_ec2_public_ipv4 }}"
  recipient_delimiter: +
  relay_recipient_maps: hash:{{ mailman3_distribute_maps_dir }}/postfix_lmtp
  relay_domains: "{{ mailman3_domains | join(', ') }}"
  smtpd_relay_restrictions: permit_mynetworks, reject_unauth_destination
  mydomain: galaxyproject.org
  mydestination: $myhostname, localhost.$mydomain, localhost, $mydomain
  sender_canonical_maps: tcp:localhost:10001
  sender_canonical_classes: envelope_sender
  recipient_canonical_maps: tcp:localhost:10002
  recipient_canonical_classes: envelope_recipient,header_recipient
  # This config allows you to bypass the content_filter, but it's not needed since amavisd-new is configured to do the bypass
  #content_filter: null
  #smtpd_relay_restrictions: check_recipient_access hash:{{ postfix_config_dir }}/relay_restrictions, permit_mynetworks, permit_sasl_authenticated, defer_unauth_destination
  #parent_domain_matches_subdomains: debug_peer_list,fast_flush_domains,mynetworks,permit_mx_backup_networks,qmqpd_authorized_clients,relay_domains
  virtual_alias_domains: "{{ postfix_virtual_domains | join(', ') }}"
  virtual_alias_maps: hash:/etc/postfix/virtual

postfix_master_config:
  # Override: since we are not using the blanket content_filter, need to disable relay_restrictions when reinjecting or
  # we create a loop; additionally, sign all mail that passes through amavis.
  localhost:10025-inet:
    args: |
      -o content_filter=
          -o local_recipient_maps=
          -o relay_recipient_maps=
          -o smtpd_restriction_classes=
          -o smtpd_delay_reject=no
          -o smtpd_client_restrictions=permit_mynetworks,reject
          -o smtpd_helo_restrictions=
          -o smtpd_sender_restrictions=
          -o smtpd_recipient_restrictions=permit_mynetworks,reject
          -o smtpd_data_restrictions=reject_unauth_pipelining
          -o smtpd_end_of_data_restrictions=
          -o mynetworks=127.0.0.0/8
          -o smtpd_error_sleep_time=0
          -o smtpd_soft_error_limit=1001
          -o smtpd_hard_error_limit=1000
          -o smtpd_client_connection_count_limit=0
          -o smtpd_client_connection_rate_limit=0
          -o receive_override_options=no_header_body_checks,no_unknown_recipient_checks
          -o milter_default_action=accept
          -o milter_protocol=6
          -o smtpd_milters=unix:/var/run/opendkim/opendkim.sock
          -o non_smtpd_milters=unix:/var/run/opendkim/opendkim.sock
#          -o sender_canonical_maps=tcp:localhost:10001
#          -o sender_canonical_classes=envelope_sender
#          -o recipient_canonical_maps=tcp:localhost:10002
#          -o recipient_canonical_classes=envelope_recipient,header_recipient
# For conditional content_filter
#          -o smtpd_relay_restrictions=permit_mynetworks,permit_sasl_authenticated,defer_unauth_destination

# FIXME: deduplicate from list_servers, but can't be in meta_galaxyproject due to override of postfix_config, probably
# should have an automatic group for anything on PSU networks
mailman3_distribute_maps_dir: /var/list
mailman3_domains:
  - lists.galaxyproject.org
  - lists.anvilproject.org

# I think these were originally based off https://verchick.com/mecham/public_html/spam/bypassing.html
# bypass_virus_checks_acl was not in my old config though
postfix_amavisd_new_config:
  '@bypass_spam_checks_acl': "@spam_lovers_acl = qw({{ mailman3_domains | join(' ') }})"
  '@spam_kill_level_maps': ({'{{ mailman3_domains | join("' => 9999, '") }}' => 9999}, \$sa_kill_level_deflt,)
  '@bypass_virus_checks_acl': "@virus_lovers_acl = qw({{ mailman3_domains | join(' ') }})"

postfix_clamav_config:
  # prevents temporarily spiking clamd memory to 2x while loading the new signature database
  ConcurrentDatabaseReload: "no"

# templates/{{ item }}.j2 in the playbook
postfix_maps:
  - postfix/virtual
