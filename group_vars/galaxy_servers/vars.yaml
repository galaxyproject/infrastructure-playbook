---

galaxy_privileged_user: gxsrc
galaxy_group: G-803372

galaxy_servers_group_groups:
  - "{{ tacc_groups.tiaas }}"
  - "{{ tacc_groups.gxsrc }}"
  # This is necessary for privilege separation
  - "{{ tacc_groups.G_803372 }}"

galaxy_servers_group_users:
  - "{{ tacc_users.tiaas }}"
  - "{{ tacc_users.gxsrc }}"

galaxy_servers_group_authorized_key_users:
  - name: gxsrc
    authorized: "{{ galaxy_team_users }}"
  - name: "{{ galaxy_user }}"
    authorized: "{{ galaxy_team_users }}"

galaxy_servers_group_directories:
  - path: /srv/nginx/{{ galaxy_instance_hostname }}/root
    owner: "{{ galaxy_privileged_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /srv/galaxy/{{ galaxy_instance_codename }}
    owner: "{{ galaxy_privileged_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /srv/galaxy/{{ galaxy_instance_codename }}/bin
    owner: "{{ galaxy_privileged_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /srv/galaxy/{{ galaxy_instance_codename }}/config
    owner: "{{ galaxy_privileged_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /srv/galaxy/{{ galaxy_instance_codename }}/log
    owner: "{{ galaxy_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /srv/galaxy/{{ galaxy_instance_codename }}/var
    owner: "{{ galaxy_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"

systemd_journald_persistent: true

galaxy_cvmfs_repos_enabled: true

# use 40% of /
cvmfs_quota_limit: "{{ ((ansible_mounts | selectattr('mount', 'eq', '/') | first).size_total * 0.4 / 1024**2) | int }}"

# override so that the TACC stratum 1 is always first
galaxy_cvmfs_server_urls:
  - domain: galaxyproject.org
    use_geoapi: no
    urls:
      - "http://cvmfs1-tacc0.galaxyproject.org/cvmfs/@fqrn@"
      - "http://cvmfs1-iu0.galaxyproject.org/cvmfs/@fqrn@"
      - "http://cvmfs1-psu0.galaxyproject.org/cvmfs/@fqrn@"

cvmfs_http_proxies:
  - "DIRECT"

cvmfs_install_setuid_cvmfs_wipecache: no
cvmfs_install_setuid_cvmfs_remount_sync: yes

teletraf_x509_cert_host: "{{ galaxy_instance_hostname }}"

# log stats to telegraf locally
#
# separate db filtering for statsd (Galaxy timing) and system stuff using
#   https://github.com/influxdata/telegraf/issues/1778
_override_telegraf_agent_output:
  - type: influxdb
    config:
      - urls = ["https://stats.galaxyproject.org:8086"]
      - username = "client"
      - password = "{{ influxdb_client_pass }}"
      - database = "system"
      - '[outputs.influxdb.tagdrop]'
      - '  influxdb_database = ["*"]'
  - type: influxdb
    config:
      - urls = ["https://stats.galaxyproject.org:8086"]
      - username = "client"
      - password = "{{ influxdb_client_pass }}"
      - database = "telegraf"
      - 'tagexclude = ["influxdb_database"]'
      - '[outputs.influxdb.tagpass]'
      - '  influxdb_database = ["telegraf"]'
  - type: influxdb
    config:
      - urls = ["https://stats.galaxyproject.org:8086"]
      - username = "client"
      - password = "{{ influxdb_client_pass }}"
      - database = "{{ galaxy_instance_codename }}_sql"
      - 'tagexclude = ["influxdb_database"]'
      - '[outputs.influxdb.tagpass]'
      - '  influxdb_database = ["{{ galaxy_instance_codename }}_sql"]'

_override_telegraf_plugins_default:
  - plugin: statsd
    config:
      - service_address = "127.0.0.1:8125"
      - delete_gauges = false
      - delete_counters = false
      - delete_sets = false
      - delete_timings = true
      - percentiles = [90]
      - metric_separator = "_"
      - parse_data_dog_tags = false
      - allowed_pending_messages = 10000
      - percentile_limit = 1000
      - udp_packet_size = 1500
      - '[inputs.statsd.tags]'
      - '  influxdb_database = "telegraf"'
  - plugin: nginx
    config:
      - urls = ["http://localhost/_status"]
  - plugin: cpu
    config:
      - percpu = true
  - plugin: disk
  - plugin: kernel
  - plugin: processes
  - plugin: diskio
  - plugin: mem
  - plugin: system
  - plugin: swap
  - plugin: net
    config:
      # prevent collecting docker veth* which wrecks series cardinality
      - interfaces = ["eth*", "en*", "net*", "lo"]
  - plugin: netstat
  # TODO: doesn't this duplicate telegraf_plugins_extra in letsencrypt_clients group_vars?
  - plugin: x509_cert
    config:
      # could use the cert file directly, but this way we check the actual cert in use, you just have to filter out the
      # CA cert in grafana
      - sources = ["https://{{ teletraf_x509_cert_host | default(inventory_hostname) }}:{{ telegraf_x509_cert_port | default(443) }}"]
      # https://github.com/influxdata/telegraf/issues/8809
      - timeout = "5s"
  # double escape is required for valid TOML
  - plugin: procstat
    config:
      - pattern = "main\\.py.*handler0"
      - 'user = "{{ galaxy_user }}"'
  - plugin: procstat
    config:
      - pattern = "main\\.py.*handler1"
      - 'user = "{{ galaxy_user }}"'
  - plugin: procstat
    config:
      - pattern = "main\\.py.*handler2"
      - 'user = "{{ galaxy_user }}"'
  - plugin: procstat
    config:
      - pattern = "main\\.py.*handler3"
      - 'user = "{{ galaxy_user }}"'
  - plugin: procstat
    config:
      - pattern = "main\\.py.*workflow_scheduler0"
      - 'user = "{{ galaxy_user }}"'
