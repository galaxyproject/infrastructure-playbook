---

galaxy_privileged_user: gxsrc
galaxy_group: G-803372

galaxy_servers_group_groups:
  - "{{ tacc_groups.gxsrc }}"
  # This is necessary for privilege separation
  - "{{ tacc_groups.G_803372 }}"

galaxy_servers_group_users:
  - "{{ tacc_users.gxsrc }}"

galaxy_servers_group_authorized_key_users:
  - name: gxsrc
    authorized: "{{ galaxy_team_users }}"
  - name: "{{ galaxy_user }}"
    authorized: "{{ galaxy_team_users }}"

galaxy_servers_group_directories:
  - path: /srv/nginx/{{ galaxy_instance_hostname }}/root
    owner: "{{ galaxy_privileged_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /srv/galaxy/{{ galaxy_instance_codename }}
    owner: "{{ galaxy_privileged_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /srv/galaxy/{{ galaxy_instance_codename }}/bin
    owner: "{{ galaxy_privileged_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /srv/galaxy/{{ galaxy_instance_codename }}/config
    owner: "{{ galaxy_privileged_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /srv/galaxy/{{ galaxy_instance_codename }}/log
    owner: "{{ galaxy_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /srv/galaxy/{{ galaxy_instance_codename }}/var
    owner: "{{ galaxy_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: "{{ nginx_srv }}/{{ galaxy_instance_hostname }}/error"
    owner: "{{ galaxy_privileged_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - path: /home/{{ galaxy_user }}/bin
    owner: "{{ galaxy_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"

galaxy_servers_group_templates:
  - src: templates/galaxy/helper.py.j2
    dest: /srv/galaxy/{{ galaxy_instance_codename }}/bin/helper.py
    owner: "{{ galaxy_privileged_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"

galaxy_servers_group_files:
  - content: |
      #!/bin/bash
      .  {{ galaxy_venv_dir }}/bin/activate
      GALAXY_CONFIG_FILE={{ galaxy_config_file }} PYTHONPATH={{ galaxy_server_dir }}/lib python3 /srv/galaxy/{{ galaxy_instance_codename }}/bin/helper.py "$@"
    dest: /home/{{ galaxy_user }}/bin/helper
    owner: "{{ galaxy_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - content: |
      #!/bin/bash
      .  {{ galaxy_venv_dir }}/bin/activate
      GALAXY_CONFIG_FILE={{ galaxy_config_file }} python3 {{ galaxy_server_dir }}/scripts/secret_decoder_ring.py encode "$1"
    dest: /home/{{ galaxy_user }}/bin/gxencode
    owner: "{{ galaxy_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"
  - content: |
      #!/bin/bash
      .  {{ galaxy_venv_dir }}/bin/activate
      GALAXY_CONFIG_FILE={{ galaxy_config_file }} python3 {{ galaxy_server_dir }}/scripts/secret_decoder_ring.py decode "$1"
    dest: /home/{{ galaxy_user }}/bin/gxdecode
    owner: "{{ galaxy_user }}"
    group: "{{ galaxy_group }}"
    mode: "0755"

# TODO: remove
#galaxy_servers_group_packages:
#  - tmpwatch

systemd_journald_persistent: true

galaxy_cvmfs_repos_enabled: true

# use 40% of /
cvmfs_quota_limit: "{{ ((ansible_mounts | selectattr('mount', 'eq', '/') | first).size_total * 0.4 / 1024**2) | int }}"

# override so that the TACC stratum 1 is always first
galaxy_cvmfs_server_urls:
  - domain: galaxyproject.org
    use_geoapi: no
    urls:
      - "http://cvmfs1-tacc0.galaxyproject.org/cvmfs/@fqrn@"
      - "http://cvmfs1-iu0.galaxyproject.org/cvmfs/@fqrn@"
      - "http://cvmfs1-psu0.galaxyproject.org/cvmfs/@fqrn@"

cvmfs_http_proxies:
  - "DIRECT"

cvmfs_install_setuid_cvmfs_wipecache: no
cvmfs_install_setuid_cvmfs_remount_sync: yes

teletraf_x509_cert_host: "{{ galaxy_instance_hostname }}"

# log stats to telegraf locally
#
# separate db filtering for statsd (Galaxy timing) and system stuff using
#   https://github.com/influxdata/telegraf/issues/1778
_override_telegraf_agent_output:
  - type: influxdb
    config:
      - urls = ["https://stats.galaxyproject.org:8086"]
      - username = "client"
      - password = "{{ influxdb_client_pass }}"
      - database = "system"
      - '[outputs.influxdb.tagdrop]'
      - '  influxdb_database = ["*"]'
  - type: influxdb
    config:
      - urls = ["https://stats.galaxyproject.org:8086"]
      - username = "client"
      - password = "{{ influxdb_client_pass }}"
      - database = "telegraf"
      - 'tagexclude = ["influxdb_database"]'
      - '[outputs.influxdb.tagpass]'
      - '  influxdb_database = ["telegraf"]'
  - type: influxdb
    config:
      - urls = ["https://stats.galaxyproject.org:8086"]
      - username = "client"
      - password = "{{ influxdb_client_pass }}"
      - database = "{{ galaxy_instance_codename }}_sql"
      - 'tagexclude = ["influxdb_database"]'
      - '[outputs.influxdb.tagpass]'
      - '  influxdb_database = ["{{ galaxy_instance_codename }}_sql"]'

nginx_upload_module_url: https://github.com/natefoo/nginx-upload-module-build/raw/refs/heads/main/nginx_v1.20.1.el9/build-module-artifacts/nginx-module-upload-1.20.1+1.0-1.el9.ngx.x86_64.rpm
nginx_load_modules:
  - order: 50
    path: ngx_http_upload_module.so

all_gravity_config:
  instance_name: "{{ galaxy_instance_codename }}"
  process_manager: systemd
  galaxy_user: "{{ galaxy_user }}"
  galaxy_group: "{{ galaxy_group }}"
  galaxy_root: "{{ galaxy_server_dir }}"
  galaxy_config_file: "{{ galaxy_config_file }}"
  #log_dir: "{{ galaxy_log_dir }}"
  virtualenv: "{{ galaxy_venv_dir }}"
  memory_limit: "{{ galaxy_memory_limit }}"
  gunicorn:
    enable: false
  celery:
    enable: false
    enable_beat: false

# Automatically assemble gravity_config depending on what groups the host is in
gravity_config: "{{ lookup('galaxyproject.general.inheritance_chain', 'gravity_config') }}"

## used by: galaxyproject.tusd
tusd_systemd: false
#tusd_version: ...

## used by: gravity tasks in playbook-galaxy-stack
gravity_venv_dir: "/srv/galaxy/{{ galaxy_instance_codename }}/gravity"
gravity_package: "gravity==1.0.7"
gravity_config_file: "/etc/galaxy/gravity.d/galaxy_{{ galaxy_instance_codename }}.yml"
galaxy_gravity_command: "{{ gravity_venv_dir }}/bin/galaxyctl"

## used by: gravity_config
galaxy_config_file: "/srv/galaxy/{{ galaxy_instance_codename }}/config/galaxy.yml"
galaxy_venv_dir: "/cvmfs/{{ galaxy_cvmfs_repo }}/venv"

## used by: cleanup cron job script
galaxy_cleanup_jobs:
  # job working dir
  - "/bin/find {{ galaxy_job_working_directory }}/*/* -mindepth 1 -maxdepth 1 -type d -mtime +7 -exec rm -rvf {} + | tee -a {{ galaxy_log_dir }}/cleanup_jobs.log && find {{ galaxy_job_working_directory }}/* -mindepth 0 -maxdepth 1 -type d -empty -exec rmdir {} +"
  # scratch
  - "/bin/find {{ galaxy_new_file_path }} -mindepth 1 -maxdepth 1 -mtime +5 ! -name '.nfs*' -exec rm -rvf {} + | tee -a {{ galaxy_log_dir }}/cleanup_scratch.log"
  # tus upload store
  - "/bin/find {{ galaxy_tus_upload_store }} -mindepth 1 -maxdepth 1 -mtime +5 ! -name '.nfs*' -exec rm -rvf {} + | tee -a {{ galaxy_log_dir }}/cleanup_tus_upload_store.log"
  # job files
  - "/bin/find {{ nginx_job_files_upload_store }} -mindepth 1 -maxdepth 1 -mtime +5 ! -name '.nfs*' -exec rm -rvf {} + | tee -a {{ galaxy_log_dir }}/cleanup_job_files_upload_store.log"
  # pulsar amqp_ack
  - "/bin/find {{ galaxy_job_conf_persistence_directory }}/*/consume -mindepth 1 -maxdepth 1 -mtime +14 ! -name '.nfs*' -exec rm -rvf {} + | tee -a {{ galaxy_log_dir }}/cleanup_amqp_ack_consume.log"
  # celery scratch
  - "/bin/find {{ galaxy_celery_scratch_path }} -mindepth 1 -maxdepth 1 -mtime +14 ! -name '.nfs*' -exec rm -rvf {} + | tee -a {{ galaxy_log_dir }}/cleanup_celery_scratch.log"
  # galaxy datasets
  - "/srv/galaxy/{{ galaxy_instance_codename }}/bin/cleanup_datasets.sh 7 | tee -a {{ galaxy_log_dir }}/cleanup_datasets_sh.log"
