---

tacc_corral_gateway_address: 129.114.52.151

filesystems:
  - dev: /dev/nvme1n1
    fstype: xfs

host_mounts:
  - src: /dev/nvme1n1
    path: /var/lib/pgsql
    fstype: xfs

host_packages:
  # for gx-it-proxy
  - gcc
  - gcc-c++
  - postgresql17-devel

# Override for newest stable
postgresql_version: 17

postgresql_conf:
  listen_addresses: "'*'"
  temp_buffers: 64MB
  max_prepared_transactions: 100
  log_checkpoints: "on"
  # prevent threads on less frequently hit handlers (e.g. VGP) from losing their connection after long quiet periods
  tcp_keepalives_idle: 300

  # DB Version: 17
  # # OS Type: linux
  # # DB Type: mixed
  # # Total Memory (RAM): 8 GB
  # # CPUs num: 4
  # # Connections num: 100
  # # Data Storage: san
  max_connections: 100
  shared_buffers: 2GB
  effective_cache_size: 6GB
  maintenance_work_mem: 512MB
  checkpoint_completion_target: 0.9
  wal_buffers: 16MB
  default_statistics_target: 100
  random_page_cost: 1.1
  effective_io_concurrency: 300
  work_mem: 8MB  # pgtune recommended 5242kB
  huge_pages: off
  min_wal_size: 1GB
  max_wal_size: 4GB
  max_worker_processes: 4
  max_parallel_workers_per_gather: 2
  max_parallel_workers: 4
  max_parallel_maintenance_workers: 2

redis_requirepass: "{{ vault_redis_requirepass }}"
redis_bind_interface: 127.0.0.1

gravity_config:
  instance_name: "{{ galaxy_instance_codename }}"
  process_manager: systemd
  galaxy_user: "{{ galaxy_user }}"
  galaxy_group: "{{ galaxy_group }}"
  galaxy_root: "{{ galaxy_server_dir }}"
  galaxy_config_file: "{{ galaxy_config_file }}"
  #log_dir: "{{ galaxy_log_dir }}"
  virtualenv: "{{ galaxy_venv_dir }}"
  gunicorn:
    - bind: localhost:8080
      workers: 1
      timeout: 600
      restart_timeout: 900
      # https://github.com/encode/uvicorn/issues/610
      #extra_args: --statsd-host=127.0.0.1:8125 --statsd-prefix=test.galaxy.gunicorn
      # when preload is enabled, gunicorn still detaches shortly after spawn, but does not write the pidfile until after
      # the application loads, so unicornherder fails after 5 tries (with a 1 second wait) to read the pidfile and then
      # exits
      preload: true
      extra_args: --max-requests 50000 --max-requests-jitter 10000
      environment:
        LD_LIBRARY_PATH: "/cvmfs/{{ galaxy_cvmfs_repo }}/deps/_conda/envs/_galaxy_weasyprint_deps_/lib"
        HDF5_USE_FILE_LOCKING: "FALSE"
    - bind: localhost:8081
      workers: 1
      timeout: 600
      restart_timeout: 900
      preload: true
      extra_args: --max-requests 50000 --max-requests-jitter 10000
      environment:
        LD_LIBRARY_PATH: "/cvmfs/{{ galaxy_cvmfs_repo }}/deps/_conda/envs/_galaxy_weasyprint_deps_/lib"
        HDF5_USE_FILE_LOCKING: "FALSE"
  celery:
    environment:
      TMPDIR: /corral4/test/celery-scratch
      LD_LIBRARY_PATH: "/cvmfs/{{ galaxy_cvmfs_repo }}/deps/_conda/envs/_galaxy_weasyprint_deps_/lib"
      HDF5_USE_FILE_LOCKING: "FALSE"
  tusd:
    enable: true
    tusd_path: /usr/local/sbin/tusd
    upload_dir: "{{ galaxy_tus_upload_store }}"
    #- enable: true
    #  tusd_path: /usr/local/sbin/tusd
    #  upload_dir: "{{ galaxy_tus_upload_store }}"
    #- enable: true
    #  tusd_path: /usr/local/sbin/tusd
    #  upload_dir: "{{ galaxy_tus_upload_store_job_files }}"
    #  port: 1081
    #  hooks_http: /api/job_files/tus_hooks
  gx_it_proxy:
    enable: true
    port: "{{ gxit_proxy_port }}"
    sessions: "{{ galaxy_interactivetools_map }}"
    verbose: true
    environment:
      # FIXME: the systemd service unit sets this as /srv/galaxy/test, which is not writable. When this is the case the
      # proxy fails to start with essentially no output (just writes an empty newline to the log file).
      HOME: "/home/g2test"
      PATH: "/usr/pgsql-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin"
  handlers:
    test_handler:
      name_template: "{name}{process}"
      processes: 1
      pools:
        - job-handlers
      environment:
        HDF5_USE_FILE_LOCKING: "FALSE"
    test_workflow_scheduler:
      name_template: "{name}{process}"
      processes: 1
      pools:
        - workflow-schedulers
      environment:
        HDF5_USE_FILE_LOCKING: "FALSE"
